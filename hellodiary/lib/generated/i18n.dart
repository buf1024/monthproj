import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get about => "About";
  String get addDiary => "New Entry";
  String get background => "Background";
  String get browser => "Entries";
  String get camera => "Camera";
  String get cancel => "Cancel";
  String get cancelDelete => "Cancel";
  String get chgLog => "Change log：";
  String get count => "Post(s)";
  String get deletedDiary => "Diary deleted";
  String get diary => "Diary";
  String get emptyImage => "Empty";
  String get followSysLang => "System";
  String get gallery => "Gallery";
  String get imageCount => "Image(s)";
  String get incorrectPass => "Incorrect password";
  String get language => "Language";
  String get mine => "Mine";
  String get mismatchPass => "Password mismatch, please reset";
  String get openUrlFailed => "Fail to open URL";
  String get password => "Password";
  String get protect => "Protect";
  String get reenterPass => "Please reenter password";
  String get save => "Save";
  String get saved => "Saved";
  String get setting => "Settings";
  String get theme => "Theme";
  String get title => "Title";
  String get tryLater => "Fail to obtain version info, pls try later!";
  String get update => "Update";
  String get useIt => "TRY IT!";
  String get version => "Version";
  String get wordCount => "Word(s)";
  String currentVersion(String version) => "Current version $version";
  String diaryCount(String post) => "$post Post(s)";
  String newVersion(String version) => "New version $version found";
  String newestVersion(String version) => "Current ($version) is the newest version";
  String skipTime(String skipTime) => "$skipTime second(s) skip";
}

class $zh_TW extends S {
  const $zh_TW();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get imageCount => "圖";
  @override
  String get cancel => "取消";
  @override
  String get saved => "已保存";
  @override
  String get followSysLang => "跟隨系統";
  @override
  String get about => "關於";
  @override
  String get save => "保存";
  @override
  String get update => "更新";
  @override
  String get language => "語言";
  @override
  String get title => "標題";
  @override
  String get openUrlFailed => "無法打卡連接地址";
  @override
  String get setting => "設置";
  @override
  String get password => "密碼";
  @override
  String get browser => "瀏覽";
  @override
  String get theme => "主題";
  @override
  String get protect => "密碼保護";
  @override
  String get chgLog => "更新日誌：";
  @override
  String get camera => "照相";
  @override
  String get reenterPass => "請重新輸入密碼";
  @override
  String get gallery => "圖庫";
  @override
  String get mine => "我的";
  @override
  String get wordCount => "字";
  @override
  String get deletedDiary => "日記已刪除";
  @override
  String get cancelDelete => "撤銷";
  @override
  String get count => "篇";
  @override
  String get emptyImage => "無圖片";
  @override
  String get version => "版本";
  @override
  String get diary => "日記";
  @override
  String get useIt => "立刻體驗";
  @override
  String get tryLater => "無法獲取版本信息，請稍後再試!";
  @override
  String get background => "背景";
  @override
  String get addDiary => "添加日記";
  @override
  String get mismatchPass => "兩次輸入密碼不一致，請重新設置";
  @override
  String get incorrectPass => "密碼不正確";
  @override
  String skipTime(String skipTime) => "$skipTime 秒跳過";
  @override
  String newestVersion(String version) => "當前版本 ($version) 已經是最新版本";
  @override
  String currentVersion(String version) => "當前版本 $version";
  @override
  String diaryCount(String post) => "$post 篇";
  @override
  String newVersion(String version) => "發現新版本 $version";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get imageCount => "图";
  @override
  String get cancel => "取消";
  @override
  String get saved => "已保存";
  @override
  String get followSysLang => "跟随系统";
  @override
  String get about => "关于";
  @override
  String get save => "保存";
  @override
  String get update => "更新";
  @override
  String get language => "语言";
  @override
  String get title => "标题";
  @override
  String get openUrlFailed => "无法打开链接地址";
  @override
  String get setting => "设置";
  @override
  String get password => "密码";
  @override
  String get browser => "浏览";
  @override
  String get theme => "主题";
  @override
  String get protect => "密码保护";
  @override
  String get chgLog => "更新日志：";
  @override
  String get camera => "照相";
  @override
  String get reenterPass => "请重新输入密码";
  @override
  String get gallery => "图库";
  @override
  String get mine => "我的";
  @override
  String get wordCount => "字";
  @override
  String get deletedDiary => "日记已删除";
  @override
  String get cancelDelete => "撤销";
  @override
  String get count => "篇";
  @override
  String get emptyImage => "无图片";
  @override
  String get version => "版本";
  @override
  String get diary => "日记";
  @override
  String get useIt => "立即体验";
  @override
  String get tryLater => "无法获取版本信息，请稍后再试!";
  @override
  String get background => "背景";
  @override
  String get addDiary => "添加日记";
  @override
  String get mismatchPass => "两次输入密码不一致，请重新设置";
  @override
  String get incorrectPass => "密码不正确";
  @override
  String skipTime(String skipTime) => "$skipTime 秒跳过";
  @override
  String newestVersion(String version) => "当前版本 ($version) 已经是最新版本";
  @override
  String currentVersion(String version) => "当前版本 $version";
  @override
  String diaryCount(String post) => "$post 篇";
  @override
  String newVersion(String version) => "发现新版本 $version";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("zh", "TW"),
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "zh_TW":
          S.current = const $zh_TW();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh_CN":
          S.current = const $zh_CN();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
