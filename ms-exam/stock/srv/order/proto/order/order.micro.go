// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/order/order.proto

package com_toyent_srv_order

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Order service

type OrderService interface {
	QueryOrder(ctx context.Context, in *QueryOrderRequest, opts ...client.CallOption) (*QueryOrderResponse, error)
	Order(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	QueryHold(ctx context.Context, in *QueryHoldRequest, opts ...client.CallOption) (*QueryHoldResponse, error)
	Cancel(ctx context.Context, in *CancelRequest, opts ...client.CallOption) (*CancelResponse, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.toyent.srv.order"
	}
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) QueryOrder(ctx context.Context, in *QueryOrderRequest, opts ...client.CallOption) (*QueryOrderResponse, error) {
	req := c.c.NewRequest(c.name, "Order.QueryOrder", in)
	out := new(QueryOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Order(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "Order.Order", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) QueryHold(ctx context.Context, in *QueryHoldRequest, opts ...client.CallOption) (*QueryHoldResponse, error) {
	req := c.c.NewRequest(c.name, "Order.QueryHold", in)
	out := new(QueryHoldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Cancel(ctx context.Context, in *CancelRequest, opts ...client.CallOption) (*CancelResponse, error) {
	req := c.c.NewRequest(c.name, "Order.Cancel", in)
	out := new(CancelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Order service

type OrderHandler interface {
	QueryOrder(context.Context, *QueryOrderRequest, *QueryOrderResponse) error
	Order(context.Context, *OrderRequest, *OrderResponse) error
	QueryHold(context.Context, *QueryHoldRequest, *QueryHoldResponse) error
	Cancel(context.Context, *CancelRequest, *CancelResponse) error
}

func RegisterOrderHandler(s server.Server, hdlr OrderHandler, opts ...server.HandlerOption) error {
	type order interface {
		QueryOrder(ctx context.Context, in *QueryOrderRequest, out *QueryOrderResponse) error
		Order(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		QueryHold(ctx context.Context, in *QueryHoldRequest, out *QueryHoldResponse) error
		Cancel(ctx context.Context, in *CancelRequest, out *CancelResponse) error
	}
	type Order struct {
		order
	}
	h := &orderHandler{hdlr}
	return s.Handle(s.NewHandler(&Order{h}, opts...))
}

type orderHandler struct {
	OrderHandler
}

func (h *orderHandler) QueryOrder(ctx context.Context, in *QueryOrderRequest, out *QueryOrderResponse) error {
	return h.OrderHandler.QueryOrder(ctx, in, out)
}

func (h *orderHandler) Order(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderHandler.Order(ctx, in, out)
}

func (h *orderHandler) QueryHold(ctx context.Context, in *QueryHoldRequest, out *QueryHoldResponse) error {
	return h.OrderHandler.QueryHold(ctx, in, out)
}

func (h *orderHandler) Cancel(ctx context.Context, in *CancelRequest, out *CancelResponse) error {
	return h.OrderHandler.Cancel(ctx, in, out)
}
