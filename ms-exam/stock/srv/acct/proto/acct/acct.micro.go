// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/acct/acct.proto

package com_toyent_srv_acct

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Acct service

type AcctService interface {
	Open(ctx context.Context, in *OpenRequest, opts ...client.CallOption) (*OpenResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error)
	Change(ctx context.Context, in *ChangeRequest, opts ...client.CallOption) (*ChangeResponse, error)
}

type acctService struct {
	c    client.Client
	name string
}

func NewAcctService(name string, c client.Client) AcctService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.toyent.srv.acct"
	}
	return &acctService{
		c:    c,
		name: name,
	}
}

func (c *acctService) Open(ctx context.Context, in *OpenRequest, opts ...client.CallOption) (*OpenResponse, error) {
	req := c.c.NewRequest(c.name, "Acct.Open", in)
	out := new(OpenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acctService) Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error) {
	req := c.c.NewRequest(c.name, "Acct.Query", in)
	out := new(QueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acctService) Change(ctx context.Context, in *ChangeRequest, opts ...client.CallOption) (*ChangeResponse, error) {
	req := c.c.NewRequest(c.name, "Acct.Change", in)
	out := new(ChangeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Acct service

type AcctHandler interface {
	Open(context.Context, *OpenRequest, *OpenResponse) error
	Query(context.Context, *QueryRequest, *QueryResponse) error
	Change(context.Context, *ChangeRequest, *ChangeResponse) error
}

func RegisterAcctHandler(s server.Server, hdlr AcctHandler, opts ...server.HandlerOption) error {
	type acct interface {
		Open(ctx context.Context, in *OpenRequest, out *OpenResponse) error
		Query(ctx context.Context, in *QueryRequest, out *QueryResponse) error
		Change(ctx context.Context, in *ChangeRequest, out *ChangeResponse) error
	}
	type Acct struct {
		acct
	}
	h := &acctHandler{hdlr}
	return s.Handle(s.NewHandler(&Acct{h}, opts...))
}

type acctHandler struct {
	AcctHandler
}

func (h *acctHandler) Open(ctx context.Context, in *OpenRequest, out *OpenResponse) error {
	return h.AcctHandler.Open(ctx, in, out)
}

func (h *acctHandler) Query(ctx context.Context, in *QueryRequest, out *QueryResponse) error {
	return h.AcctHandler.Query(ctx, in, out)
}

func (h *acctHandler) Change(ctx context.Context, in *ChangeRequest, out *ChangeResponse) error {
	return h.AcctHandler.Change(ctx, in, out)
}
