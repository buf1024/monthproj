// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/stock/stock.proto

package com_toyent_srv_stock

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Stock service

type StockService interface {
	Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error)
	Price(ctx context.Context, in *PriceRequest, opts ...client.CallOption) (*PriceResponse, error)
	Quot(ctx context.Context, in *QuotRequest, opts ...client.CallOption) (*QuotResponse, error)
	OpenTrade(ctx context.Context, in *OpenTradeRequest, opts ...client.CallOption) (*OpenTradeResponse, error)
}

type stockService struct {
	c    client.Client
	name string
}

func NewStockService(name string, c client.Client) StockService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.toyent.srv.stock"
	}
	return &stockService{
		c:    c,
		name: name,
	}
}

func (c *stockService) Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error) {
	req := c.c.NewRequest(c.name, "Stock.Query", in)
	out := new(QueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockService) Price(ctx context.Context, in *PriceRequest, opts ...client.CallOption) (*PriceResponse, error) {
	req := c.c.NewRequest(c.name, "Stock.Price", in)
	out := new(PriceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockService) Quot(ctx context.Context, in *QuotRequest, opts ...client.CallOption) (*QuotResponse, error) {
	req := c.c.NewRequest(c.name, "Stock.Quot", in)
	out := new(QuotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockService) OpenTrade(ctx context.Context, in *OpenTradeRequest, opts ...client.CallOption) (*OpenTradeResponse, error) {
	req := c.c.NewRequest(c.name, "Stock.OpenTrade", in)
	out := new(OpenTradeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stock service

type StockHandler interface {
	Query(context.Context, *QueryRequest, *QueryResponse) error
	Price(context.Context, *PriceRequest, *PriceResponse) error
	Quot(context.Context, *QuotRequest, *QuotResponse) error
	OpenTrade(context.Context, *OpenTradeRequest, *OpenTradeResponse) error
}

func RegisterStockHandler(s server.Server, hdlr StockHandler, opts ...server.HandlerOption) error {
	type stock interface {
		Query(ctx context.Context, in *QueryRequest, out *QueryResponse) error
		Price(ctx context.Context, in *PriceRequest, out *PriceResponse) error
		Quot(ctx context.Context, in *QuotRequest, out *QuotResponse) error
		OpenTrade(ctx context.Context, in *OpenTradeRequest, out *OpenTradeResponse) error
	}
	type Stock struct {
		stock
	}
	h := &stockHandler{hdlr}
	return s.Handle(s.NewHandler(&Stock{h}, opts...))
}

type stockHandler struct {
	StockHandler
}

func (h *stockHandler) Query(ctx context.Context, in *QueryRequest, out *QueryResponse) error {
	return h.StockHandler.Query(ctx, in, out)
}

func (h *stockHandler) Price(ctx context.Context, in *PriceRequest, out *PriceResponse) error {
	return h.StockHandler.Price(ctx, in, out)
}

func (h *stockHandler) Quot(ctx context.Context, in *QuotRequest, out *QuotResponse) error {
	return h.StockHandler.Quot(ctx, in, out)
}

func (h *stockHandler) OpenTrade(ctx context.Context, in *OpenTradeRequest, out *OpenTradeResponse) error {
	return h.StockHandler.OpenTrade(ctx, in, out)
}
